name: CHP Traffic Incident Scraper

on:
  # Run every minute for real-time monitoring (GitHub Actions minimum)
  schedule:
    - cron: '* * * * *'
  
  # Manual trigger with parameters
  workflow_dispatch:
    inputs:
      communication_center:
        description: 'Communication Center to scrape'
        required: false
        default: 'BCCC'
        type: choice
        options:
          - BFCC  # Bakersfield
          - BSCC  # Barstow
          - BICC  # Bishop
          - BCCC  # Border
          - CCCC  # Capitol
          - CHCC  # Chico
          - ECCC  # El Centro
          - FRCC  # Fresno
          - GGCC  # Golden Gate
          - HMCC  # Humboldt
          - ICCC  # Indio
          - INCC  # Inland
          - LACC  # Los Angeles
          - MRCC  # Merced
          - MYCC  # Monterey
          - OCCC  # Orange
          - RDCC  # Redding
          - SACC  # Sacramento
          - SLCC  # San Luis Obispo
          - SKCCSTCC  # Stockton
          - SUCC  # Susanville
          - TKCC  # Truckee
          - UKCC  # Ukiah
          - VTCC  # Ventura
          - YKCC  # Yreka
      run_once:
        description: 'Run once and exit (no continuous monitoring)'
        required: false
        default: false
        type: boolean

  # Allow manual trigger from API
  repository_dispatch:
    types: [manual-scrape]

jobs:
  scrape-traffic:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          ${{ runner.os }}-pip-

    - name: Cache Chrome installation
      uses: actions/cache@v3
      with:
        path: /opt/google/chrome
        key: ${{ runner.os }}-chrome-${{ hashFiles('**/requirements.txt') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-chrome-${{ hashFiles('**/requirements.txt') }}
          ${{ runner.os }}-chrome-

    - name: Cache ChromeDriver
      uses: actions/cache@v3
      with:
        path: ~/.wdm
        key: ${{ runner.os }}-chromedriver-${{ hashFiles('**/requirements.txt') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-chromedriver-${{ hashFiles('**/requirements.txt') }}
          ${{ runner.os }}-chromedriver-

    - name: Install system dependencies
      run: |
        # Only install if Chrome not cached
        if [ ! -d "/opt/google/chrome" ]; then
          sudo apt-get update -qq
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qq
          sudo apt-get install -y google-chrome-stable
        else
          echo "Chrome already installed (cached)"
        fi

    - name: Install Python dependencies
      run: |
        # Only upgrade pip if needed
        python -m pip install --upgrade pip --quiet --no-warn-script-location
        # Install packages (will use cache if available)
        pip install -r requirements.txt --quiet --no-warn-script-location --cache-dir ~/.cache/pip

    - name: Setup ChromeDriver
      run: |
        # Check if ChromeDriver already exists and is executable
        if command -v chromedriver >/dev/null 2>&1; then
          echo "ChromeDriver already available"
          chromedriver --version
        else
          echo "Setting up ChromeDriver..."
          # Use webdriver-manager to download the correct ChromeDriver
          python -c "
          from webdriver_manager.chrome import ChromeDriverManager
          import os
          import glob
          
          # Download and get the path to ChromeDriver
          driver_path = ChromeDriverManager().install()
          print(f'ChromeDriver installed at: {driver_path}')
          
          # Find the actual chromedriver executable (not the notices file)
          driver_dir = os.path.dirname(driver_path)
          actual_driver = glob.glob(os.path.join(driver_dir, 'chromedriver*'))[0]
          if not actual_driver.endswith('chromedriver'):
              # Look in subdirectories
              for root, dirs, files in os.walk(driver_dir):
                  for file in files:
                      if file == 'chromedriver':
                          actual_driver = os.path.join(root, file)
                          break
          
          print(f'Actual ChromeDriver at: {actual_driver}')
          
          # Make it executable
          os.chmod(actual_driver, 0o755)
          
          # Create symlink for easy access
          os.system(f'sudo ln -sf {actual_driver} /usr/local/bin/chromedriver')
          
          # Verify installation
          os.system('chromedriver --version')
          "
        fi

    - name: Set up Gmail credentials
      run: |
        echo "Gmail App Password configured via GitHub Secrets"

    - name: Set environment variables
      run: |
        echo "COMMUNICATION_CENTER=${{ github.event.inputs.communication_center || 'BCCC' }}" >> $GITHUB_ENV
        echo "RUN_ONCE=${{ github.event.inputs.run_once || 'false' }}" >> $GITHUB_ENV
        echo "SCRAPER_MODE=github_actions" >> $GITHUB_ENV
        echo "ENABLE_EMAIL_NOTIFICATIONS=false" >> $GITHUB_ENV
        echo "GMAIL_SENDER_EMAIL=${{ secrets.GMAIL_SENDER_EMAIL || 'jacearnoldmail@gmail.com' }}" >> $GITHUB_ENV
        echo "GMAIL_RECIPIENT_EMAIL=${{ secrets.GMAIL_RECIPIENT_EMAIL || 'jacearnoldmail@gmail.com' }}" >> $GITHUB_ENV
        echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> $GITHUB_ENV

    - name: Run traffic scraper
      run: |
        python src/scrapers/github_scraper.py

    - name: Check for changes
      id: changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        git add active_incidents.json
        git commit -m "Update traffic incidents - $(date '+%Y-%m-%d %H:%M:%S')"
        git push

    - name: Update GitHub Pages
      if: steps.changes.outputs.changes == 'true'
      run: |
        # Update the data timestamp for auto-refresh
        echo "{\"last_updated\": \"$(TZ='America/Los_Angeles' date '+%Y-%m-%dT%H:%M:%S %Z')\"}" > data/timestamp.json
        git add data/timestamp.json
        git commit -m "Update timestamp - $(date '+%Y-%m-%d %H:%M:%S')" || echo "No timestamp changes to commit"
        git push

    - name: Notify on failure
      if: failure()
      run: |
        echo "Traffic scraper failed at $(date)"
        # You can add webhook notifications here if needed
